# 175. Combine Two Tables

SELECT FirstName, Lastname, City, State FROM
Person LEFT JOIN Address
ON Person.PersonId = Address.PersonId



# 176. Second Highest Salary

SELECT Salary AS SecondHighestSalary FROM Employee GROUP BY Salary
UNION ALL (SELECT NULL AS SecondHighestSalary)          # UNION操作符用于合并两个或多个 SELECT 语句的结果集, UNION ALL保留所有重复值
ORDER BY SecondHighestSalary DESC LIMIT 1 OFFSET 1      # LIMIT 选取数量； OFFSET 偏移量



# 177. Get the Nth Highest Salary

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  SET N = N -1;
  RETURN (
      select distinct Salary from Employee group by Salary 
      order by Salary DESC limit 1 offset N
      
  );
END

# How to define a function in MySQL
Create function 函数名（参数）
Returns 返回值数据类型
[with {Encryption | Schemabinding }]
[as]
begin
SQL语句(必须有return 变量或值)
End




# 180. Consevutive Numbers

select distinct l1.Num as ConsecutiveNums from Logs l1, Logs l2, Logs l3
where l1.id = l2.id -1 and l2.id = l3.id -1
and l1.Num = l2.Num and l2.Num = l3.Num


# 181. Employees earning more than their managemers

SELECT e1.Name as Employee 
from Employee as e1 inner join Employee as e2 
on e1.ManagerId = e2.Id and e1.Salary > e2.Salary


# 182. Duplicate Emails

SELECT DISTINCT (P.Email) 
FROM Person P, Person P1
WHERE (P.Id <> P1.Id and P.Email = P1.Email)

or 

SELECT DISTINCT (P.Email)
FROM Person P
GROUP BY p.Email
HAVING COUNT(p.Email)>1


# 183. Customers who never order

select Name as Customers from Customers as C
Left join Orders as O on C.Id = O.CustomerId 
where O.Id is null


# 196. Delete Duplicated Emails

Delete p1 from Person p1, Person p2 
where p1.Email = p2.Email and p1.Id > p2.Id



# 197. Rising Temperature

SELECT w1.id FROM Weather AS w1, Weather AS w2   # 表重命名
WHERE w1.Temperature > w2.Temperature and DATEDIFF(w1.recordDate, w2.recordDate) = 1  # DATEDIFF函数返回两个日期之间的时间


# 620. Not Boring Movies

select * from cinema as c
where c.id % 2 = 1 and c.description != 'boring'
order by rating DESC


# 626. Exchange Seats




# 1179. Reformat Department Table

SELECT id,
SUM(CASE month WHEN 'Jan' THEN revenue END) AS Jan_Revenue,   # 分组求和 SUM(CASE 判断条件列 WHEN 判断条件 THEN 求和列 ELSE ... END) AS 储存结果列
SUM(CASE month WHEN 'Feb' THEN revenue END) AS Feb_Revenue,
SUM(CASE month WHEN 'Mar' THEN revenue END) AS Mar_Revenue,
SUM(CASE month WHEN 'Apr' THEN revenue END) AS Apr_Revenue,
SUM(CASE month WHEN 'May' THEN revenue END) AS May_Revenue,
SUM(CASE month WHEN 'Jun' THEN revenue END) AS Jun_Revenue,
SUM(CASE month WHEN 'Jul' THEN revenue END) AS Jul_Revenue,
SUM(CASE month WHEN 'Aug' THEN revenue END) AS Aug_Revenue,
SUM(CASE month WHEN 'Sep' THEN revenue END) AS Sep_Revenue,
SUM(CASE month WHEN 'Oct' THEN revenue END) AS Oct_Revenue,
SUM(CASE month WHEN 'Nov' THEN revenue END) AS Nov_Revenue,
SUM(CASE month WHEN 'Dec' THEN revenue END) AS Dec_Revenue
FROM Department
GROUP BY id

